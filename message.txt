#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <conio.h>
#include <windows.h>
#include <time.h>
#define MENU_COUNT 6
#define category 5
#define emotion 5
#define check_1 5
#define bb 200
#define work 200
#define work_2 200
#define n 4
#define te 5
#define tes 6
#define test_num 18
#ifdef _WIN32
#define CLEAR "cls"
#define CLEAR_1 "clear"
#else
#endif
#define MAX_ID 50
#define MAX_PW 50
#define log 3

const char* emo[emotion] = {
      "기쁜",
      "슬픈",
      "화난",
      "행복한",
      "불만스러운"
};
const char* cat[category] = {
      "수업",
      "대화",
      "과제",
      "학습",
      "행사"
};
const char* tests[te] = {
        "매우 그렇다",
        "그렇다",
        "보통이다",
        "그렇지 않다",
        "전혀 그렇지 않다"
};
const char* test_1[tes] = {
        "자기관리 역량",
        "지식정보처리 역량",
        "정의적 사고 역량",
        "창의적 사고 역량",
        "심미적 감성 역량",
        "의사소통 역량"
};
const char* num_1[test_num] = {
        "나는 스스로 계획을 세우고 잘 실천하는 편이다.",
        "어려운 상황에서도 감정을 잘 조절할 수 있다.",
        "스트레스 상황에서도 집중력을 유지한다.",
        "필요한 정보를 스스로 찾아내고 분석하는 데 자신 있다.",
        "복잡한 정보를 체계적으로 정리할 수 있다.",
        "새로운 정보를 빠르게 이해하고 적용한다.",
        "타인의 감정이나 입장을 공감하려 노력한다.",
        "갈등 상황에서 상대방을 이해하려는 태도를 가진다.",
        "자신의 감정을 솔직하게 표현할 수 있다.",
        "문제를 새로운 방식으로 접근하는 편이다.",
        "다양한 아이디어를 자유롭게 떠올리는 것을 즐긴다.",
        "예상치 못한 상황에서도 유연하게 대처한다.",
        "예술 작품이나 자연에서 아름다움을 쉽게 느낀다.",
        "감각적인 요소(색, 소리, 형태 등)에 민감하다.",
        "주변의 작은 변화도 세심하게 관찰한다.",
        "내 생각을 명확하고 효과적으로 전달한다.",
        "상대방의 말을 주의 깊게 듣는다.",
        "의견 차이가 있을 때 원만하게 대화를 이끈다."
};
char ch[180] =
"오늘 하루 온몸에 에너지가 넘쳤다.     "
"하루 종일 전체적으로 기분이 좋았다.   "
"계획한 일에 집중하며 몰입도 높았다.   "
"오늘 계획한 모든 일을 마무리했다.     ";



char current_user[MAX_ID];
char w[work], w_2[work_2];
char b[bb];
int d = 0;
int c = 0;
int a = 0;
int selected = 0;
int s = 0;
int key;
int num = 0, num2 = 0, number = 0;
int p = 0;
int ui = 0;
int u = 0;
int point_1 = 0, point_2 = 0, point_3 = 0, point_4 = 0, point_5 = 0, point_6 = 0;
int point = 0;
int hy = 0;

void logout();
void find_password(const char* id);
int login_screen();
int verify_user(const char* id, const char* pw);
int is_id_taken(const char* id);
void new();
void plus();
void hg();
void check();
void test();
void test_2();
int math(int y);
int MAX(int a, int b, int c, int d, int e, int f);
int MIN(int a, int b, int c, int d, int e, int f);
void hyhg();
void hg_2();
void end();

int main() {
    hy = 0, c = 0;
    if (!login_screen()) {
        printf("프로그램 종료.\n");
        return 0;
    }
    new();
    return 0;
}

int MAX(int a, int b, int c, int d, int e, int f) {
    int points[6] = { a, b, c, d, e, f };
    int maxy = points[0];
    int max = 0;
    for (int i = 0; i < 6; i++) {
        if (points[i] > maxy) {
            max = i;
            maxy = points[i];
        }
    }
    return max;
}

int MIN(int a, int b, int c, int d, int e, int f) {
    int points[6] = { a, b, c, d, e, f };
    int miny = points[0];
    int min = 0;
    for (int i = 0; i < 6; i++) {
        if (points[i] < miny) {
            min = i;
            miny = points[i];
        }
    }
    return min;
}

int math(int y) {
    switch (ui) {
    case 3: point_1 = point; point = 0; break;
    case 6: point_2 = point; point = 0; break;
    case 9: point_3 = point; point = 0; break;
    case 12: point_4 = point; point = 0; break;
    case 15: point_5 = point; point = 0; break;
    case 18: point_6 = point; point = 0; break;
    }
    return 0;
}

void test_2() {
    selected = 0;
    int max = 0;
    int min = 0;
    if (u == 3) {
        p++;
        u = 0;
    }

    while (1) {
        system("cls");
        printf("%s\n", test_1[p]);
        printf("%s\n", num_1[ui]);
        for (int i = 0; i < te; i++) {
            if (i == selected)
                printf("> %s\n", tests[i]);  // 선택된 항목에 > 표시
            else
                printf("  %s\n", tests[i]);
        }

        key = _getch();

        // 방향키 감지
        if (key == 0 || key == 224) {
            int arrow = _getch();
            switch (arrow) {
            case 72: // ↑
                selected = (selected - 1 + te) % te;
                break;
            case 80: // ↓
                selected = (selected + 1) % te;
                break;
            }
        }
        else if (key == 13) { // 엔터 키
            point += selected + 1;
            ui++;
            u++;
            if (u == 3) {
                math(u);
            }
            if (ui == 18) {
                max = MAX(point_1, point_2, point_3, point_4, point_5, point_6);
                min = MIN(point_1, point_2, point_3, point_4, point_5, point_6);
                system("cls");
                printf("당신의 강점은 %s이고, 보완이 필요한 역량은 %s입니다.", test_1[min], test_1[max]);
                printf("\n처음으로 돌아가려면 Enter을 누르세요.");
                while (1) {
                    key = _getch();
                    if (key == 13) {
                        printf("qwer");
                        while (_kbhit()) {
                            _getch();
                        }
                        printf("asdf");
                        new();
                    }
                }
            }
            test_2();
        }

    }
}


void test() {
    point_1 = 0, point_2 = 0, point_3 = 0, point_4 = 0, point_5 = 0, point_6 = 0;
    point = 0;
    u = 0, ui = 0;
    p = 0;
    system("cls");
    printf("테스트를 시작하겠습니다.");
    Sleep(1000);
    system("cls");
    test_2();
}

void new(){
    num2 = 0;
    num = 0;
    number = 0;
    selected = 0;
    const char* menu[MENU_COUNT] = {
        "회고",
        "오늘 할 일",
        "상태 체크",
        "역량 검사",
        "로그아웃",
        "종료"
    };

    while (1) {
        // 화면 지우기
        system("cls");

        // 메뉴 출력
        printf("                                            ##    #  #####  #             #\n");
        printf("                                            # #   #  #       #     #     #\n");
        printf("                                            #  #  #  #####    #   # #   #\n");
        printf("                                            #   # #  #         # #   # #\n");
        printf("                                            #    ##  #####      #     #\n\n\n");

        printf("                            ##    #  #####  #             #  ####   ####     ###   #             #\n");
        printf("                            # #   #  #       #     #     #   #   #  #   #   #   #   #     #     #\n");
        printf("                            #  #  #  #####    #   # #   #    ####   ####   #     #   #   # #   #\n");
        printf("                            #   # #  #         # #   # #     #  #   #  #    #   #     # #   # #\n");
        printf("                            #    ##  #####      #     #      #   #  #   #    ###       #     #\n\n\n\n\n\n\n");
        for (int i = 0; i < MENU_COUNT; i++) {
        if (i == selected)
            printf("                                               > %s\n", menu[i]);  // 선택된 항목에 > 표시
        else
            printf("                                                 %s\n", menu[i]);
        }

        key = _getch();

        // 방향키 감지
        if (key == 0 || key == 224) {
            int arrow = _getch();
            switch (arrow) {
            case 72: // ↑
            selected = (selected - 1 + MENU_COUNT) % MENU_COUNT;
            break;
            case 80: // ↓
            selected = (selected + 1) % MENU_COUNT;
            break;
            }
        }
        else if (key == 13) { // 엔터 키
            break;
        }
        }
        a = selected;
        switch (a) {
        case 0:
            hg(); break;
        case 1:
            plus(); break;
        case 2:
            check(); break;
        case 3:
            test(); break;
        case 4:
            logout(); break;
        case 5:
            end(); break;
        }
}

void hyhg() {
    system("cls");
    printf("회고 할 일: %s\n", b);
    printf("카테고리: %s\n", cat[s]);
    printf("감정: %s 감정\n", emo[selected]);
    printf("이유: %s\n", w_2);
    printf("(처음으로 돌아가려면 Enter를, 다시 작성 하려면 Esc를 누르세요.)");
    key = _getch();
    if (key == 13) {
        while (_kbhit()) {
            _getch();
        }
        new();
    }
    else if (key == 27) {
        while (_kbhit()) {
            _getch();
        }
        hg_2();
    }
}

void hg() {
    selected = 0;
    time_t now;
    struct tm t;
    time(&now);
    t = *localtime(&now);
    if (hy != 0) {
        hyhg();
    }
    system("cls");
    printf("오늘 날짜 : %4d년 %d월 %d일\n"
        , t.tm_year + 1900
        , t.tm_mon + 1
        , t.tm_mday
    );
    printf("회고 할 일(100글자 이하): ");
    scanf("%200[^\n]", b);
    getchar();
    while (_kbhit()) {
        _getch();
    }
    if (key == 13) { // 엔터 키


        while (1) {
            // 화면 지우기
            system("cls");

            // 메뉴 출력
            printf("오늘 날짜 : %4d년 %d월 %d일\n"
                , t.tm_year + 1900
                , t.tm_mon + 1
                , t.tm_mday
            );
            printf("회고 할 일: %s\n", b);
            for (int i = 0; i < category; i++) {
                if (i == selected)
                    printf("> %s\n", cat[i]);  // 선택된 항목에 > 표시
                else
                    printf("  %s\n", cat[i]);
            }

            key = _getch();

            // 방향키 감지
            if (key == 0 || key == 224) {
                int arrow = _getch();
                switch (arrow) {
                case 72: // ↑
                    selected = (selected - 1 + category) % category;
                    break;
                case 80: // ↓
                    selected = (selected + 1) % category;
                    break;
                }
            }
            else if (key == 13) { // 엔터 키
                s = selected;
                break;
            }
        }

        while (1) {
            // 화면 지우기
            system("cls");

            // 메뉴 출력
            printf("오늘 날짜 : %4d년 %d월 %d일\n"
                , t.tm_year + 1900
                , t.tm_mon + 1
                , t.tm_mday
            );
            printf("회고 할 일: %s\n", b);
            printf("카테고리: %s\n", cat[s]);
            for (int i = 0; i < emotion; i++) {
                if (i == selected)
                    printf("> %s\n", emo[i]);  // 선택된 항목에 > 표시
                else
                    printf("  %s\n", emo[i]);
            }

            key = _getch();

            // 방향키 감지
            if (key == 0 || key == 224) {
                int arrow = _getch();
                switch (arrow) {
                case 72: // ↑
                    selected = (selected - 1 + emotion) % emotion;
                    break;
                case 80: // ↓
                    selected = (selected + 1) % emotion;
                    break;
                }
            }
            else if (key == 13) { // 엔터 키
                while (_kbhit()) {
                    _getch();
                }
                system("cls");
                printf("오");
                Sleep(100);
                printf("늘");
                Sleep(100);
                printf("\"");
                Sleep(100);
                for (int i = 0; b[i] != '\0'; i++) {
                    printf("%c", b[i]);
                    Sleep(100);
                }
                printf("\"");
                Sleep(100);
                printf("활");
                Sleep(100);
                printf("동");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("네");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf("!\n");
                Sleep(1000);

                printf("\"");
                Sleep(100);
                printf("%s", cat[s]);
                Sleep(100);
                printf("\"");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("진");
                Sleep(100);
                printf("행");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("였");
                Sleep(100);
                printf("고");
                Sleep(100);
                printf(", ");
                Sleep(100);
                printf("\"");
                Sleep(100);
                printf("%s", emo[selected]);
                Sleep(100);
                printf("\"");
                Sleep(100);
                printf("감");
                Sleep(100);
                printf("정");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("느");
                Sleep(100);
                printf("끼");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("군");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf("!\n");
                Sleep(1000);

                printf("왜 ");
                Sleep(100);
                printf("이");
                Sleep(100);
                printf("런 ");
                Sleep(100);
                printf("활");
                Sleep(100);
                printf("동");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("고");
                Sleep(100);
                printf(", ");
                Sleep(100);
                printf("그");
                Sleep(100);
                printf("런 ");
                Sleep(100);
                printf("기");
                Sleep(100);
                printf("분");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("느");
                Sleep(100);
                printf("끼");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("나");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf("?");
                Sleep(100);
                printf("(");
                Sleep(100);
                printf("한 ");
                Sleep(100);
                printf("줄");
                Sleep(100);
                printf("에 ");
                Sleep(100);
                printf("작");
                Sleep(100);
                printf("성");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("세");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf(")\n: ");
                Sleep(1000);
                break;


            }
        }
        getchar();
        while (_kbhit()) {
            _getch();
        }
        scanf("%200[^\n]", w_2);
        getchar();
        while (_kbhit()) {
            _getch();
        }
        if (key == 13) {
            printf("\n\"");
            Sleep(100);
            printf("%s", w_2);
            printf("\"");
            Sleep(100);
            printf("와 ");
            Sleep(100);
            printf("같");
            Sleep(100);
            printf("은 ");
            Sleep(100);
            printf("이");
            Sleep(100);
            printf("유");
            Sleep(100);
            printf("때");
            Sleep(100);
            printf("문");
            Sleep(100);
            printf("에 ");
            Sleep(100);
            printf("그");
            Sleep(100);
            printf("랬");
            Sleep(100);
            printf("군");
            Sleep(100);
            printf("요");
            Sleep(100);
            printf("!\n");
            Sleep(1000);

            while (_kbhit()) {
                _getch();
            }

            printf("감사합니다.(처음으로 돌아가려면 Enter을 누르세요)");
            key = _getch();
            if (key == 13) {
                while (_kbhit()) {
                    _getch();
                }
                hy++;
                system("cls");
                new();
            }
        }
    }
}

void hg_2() {
    selected = 0;
    time_t now;
    struct tm t;
    time(&now);
    t = *localtime(&now);
    system("cls");
    printf("오늘 날짜 : %4d년 %d월 %d일\n"
        , t.tm_year + 1900
        , t.tm_mon + 1
        , t.tm_mday
    );
    while (_kbhit()) {
        _getch();
    }
    printf("회고 할 일(100글자 이하): ");
    scanf("%200[^\n]", b);
    key = _getch();
    if (key == 13) { // 엔터 키
        while (1) {
            // 화면 지우기
            system("cls");

            // 메뉴 출력
            printf("오늘 날짜 : %4d년 %d월 %d일\n"
                , t.tm_year + 1900
                , t.tm_mon + 1
                , t.tm_mday
            );
            printf("회고 할 일: %s\n", b);
            for (int i = 0; i < category; i++) {
                if (i == selected)
                    printf("> %s\n", cat[i]);  // 선택된 항목에 > 표시
                else
                    printf("  %s\n", cat[i]);
            }

            key = _getch();

            // 방향키 감지
            if (key == 0 || key == 224) {
                int arrow = _getch();
                switch (arrow) {
                case 72: // ↑
                    selected = (selected - 1 + category) % category;
                    break;
                case 80: // ↓
                    selected = (selected + 1) % category;
                    break;
                }
            }
            else if (key == 13) { // 엔터 키
                s = selected;
                break;
            }
        }

        while (1) {
            // 화면 지우기
            system("cls");

            // 메뉴 출력
            printf("오늘 날짜 : %4d년 %d월 %d일\n"
                , t.tm_year + 1900
                , t.tm_mon + 1
                , t.tm_mday
            );
            printf("회고 할 일: %s\n", b);
            printf("카테고리: %s\n", cat[s]);
            for (int i = 0; i < emotion; i++) {
                if (i == selected)
                    printf("> %s\n", emo[i]);  // 선택된 항목에 > 표시
                else
                    printf("  %s\n", emo[i]);
            }

            key = _getch();

            // 방향키 감지
            if (key == 0 || key == 224) {
                int arrow = _getch();
                switch (arrow) {
                case 72: // ↑
                    selected = (selected - 1 + emotion) % emotion;
                    break;
                case 80: // ↓
                    selected = (selected + 1) % emotion;
                    break;
                }
            }
            else if (key == 13) { // 엔터 키
                while (_kbhit()) {
                    _getch();
                }
                system("cls");
                printf("오");
                Sleep(100);
                printf("늘");
                Sleep(100);
                printf("\"");
                Sleep(100);
                for (int i = 0; b[i] != '\0'; i++) {
                    printf("%c", b[i]);
                    Sleep(100);
                }
                printf("\"");
                Sleep(100);
                printf("활");
                Sleep(100);
                printf("동");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("네");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf("!\n");
                Sleep(1000);

                printf("\"");
                Sleep(100);
                printf("%s", cat[s]);
                Sleep(100);
                printf("\"");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("진");
                Sleep(100);
                printf("행");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("였");
                Sleep(100);
                printf("고");
                Sleep(100);
                printf(", ");
                Sleep(100);
                printf("\"");
                Sleep(100);
                printf("%s", emo[selected]);
                Sleep(100);
                printf("\"");
                Sleep(100);
                printf("감");
                Sleep(100);
                printf("정");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("느");
                Sleep(100);
                printf("끼");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("군");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf("!\n");
                Sleep(1000);

                printf("왜 ");
                Sleep(100);
                printf("이");
                Sleep(100);
                printf("런 ");
                Sleep(100);
                printf("활");
                Sleep(100);
                printf("동");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("고");
                Sleep(100);
                printf(", ");
                Sleep(100);
                printf("그");
                Sleep(100);
                printf("런 ");
                Sleep(100);
                printf("기");
                Sleep(100);
                printf("분");
                Sleep(100);
                printf("을 ");
                Sleep(100);
                printf("느");
                Sleep(100);
                printf("끼");
                Sleep(100);
                printf("셨");
                Sleep(100);
                printf("나");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf("?");
                Sleep(100);
                printf("(");
                Sleep(100);
                printf("한 ");
                Sleep(100);
                printf("줄");
                Sleep(100);
                printf("에 ");
                Sleep(100);
                printf("작");
                Sleep(100);
                printf("성");
                Sleep(100);
                printf("하");
                Sleep(100);
                printf("세");
                Sleep(100);
                printf("요");
                Sleep(100);
                printf(")\n: ");
                Sleep(1000);
                break;


            }
        }
        getchar();
        while (_kbhit()) {
            _getch();
        }
        scanf("%200[^\n]", w_2);
        getchar();
        while (_kbhit()) {
            _getch();
        }
        if (key == 13) {
            printf("\n\"");
            Sleep(100);
            for (int i = 0; w_2[i] != '\0'; i++) {
                printf("%c", w_2[i]);
                Sleep(100);
            }
            printf("\"");
            Sleep(100);
            printf("와 ");
            Sleep(100);
            printf("같");
            Sleep(100);
            printf("은 ");
            Sleep(100);
            printf("이");
            Sleep(100);
            printf("유");
            Sleep(100);
            printf("때");
            Sleep(100);
            printf("문");
            Sleep(100);
            printf("에 ");
            Sleep(100);
            printf("그");
            Sleep(100);
            printf("랬");
            Sleep(100);
            printf("군");
            Sleep(100);
            printf("요");
            Sleep(100);
            printf("!\n");
            Sleep(1000);

            while (_kbhit()) {
                _getch();
            }

            printf("감사합니다.(처음으로 돌아가려면 Enter을 누르세요)");
            key = _getch();
            if (key == 13) {
                while (_kbhit()) {
                    _getch();
                }
                hy++;
                system("cls");
                new();
            }
        }
    }
}

void plus() {
    time_t now;
    struct tm t;
    time(&now);
    t = *localtime(&now);

    system("cls");
    if (c == 3) {
        system("cls");
        printf("더 이상 입력을 할 수 없습니다. Esc를 눌러 종료하세요.");
        key = _getch();
        if (key == 27) {
            new();
        }
        plus();
    }printf("오늘 날짜 : %4d년 %d월 %d일\n"
        , t.tm_year + 1900
        , t.tm_mon + 1
        , t.tm_mday
    );
    printf("오늘 할 일을 입력하시오(100글자 이하, 최대 3개): ");
    scanf("%200[^\n]", w);
    getchar();
    c++;

    printf("계속 입력하려면 Enter을, 종료를 하려면 Esc를 누르세요.");
    key = _getch();
    if (key == 13 || key != 27) {
        while (_kbhit()) {
            _getch();
        };
        plus();
    }
    else if (key == 27) {
        while (_kbhit()) {
            _getch();
        }
        new();
    }

}

void check() {
    selected = 0;
    const char* che[check_1] = {
            "매우 그렇다.",
            "그렇다",
            "보통이다",
            "그렇지 않다",
            "매우 그렇다"
    };
    printf("상태를 체크해 주세요.");
    system("cls");
    num2 = num;
    num += 38;
    number++;

    while (1) {
        while (_kbhit()) {
            _getch();
        }
        system("cls");
        for (int i = num2; i < num; i++) {
            printf("%c", ch[i]);
        }

        printf("\n");

        // 메뉴 출력
        for (int i = 0; i < check_1; i++) {
            if (i == selected)
                printf("> %s\n", che[i]);  // 선택된 항목에 > 표시
            else
                printf("  %s\n", che[i]);
        }

        key = _getch();

        // 방향키 감지
        if (key == 0 || key == 224) {
            int arrow = _getch();
            switch (arrow) {
            case 72: // ↑
                selected = (selected - 1 + check_1) % check_1;
                break;
            case 80: // ↓
                selected = (selected + 1) % check_1;
                break;
            }
        }
        else if (key == 13) { // 엔터 키
            while (_kbhit()) {
                _getch();
            }
            system("cls");
            printf("감사합니다.");
            Sleep(500);
            if (number == n) {
                break;
            }
            check();
        }
    }
    system("cls");
    printf("상태 체크가 끝났습니다.");
    Sleep(2000);
    while (_kbhit()) {
        _getch();
    }
    new();

}
//여기부터 로그인 창 코드
int verify_user(const char* id, const char* pw) {
    FILE* fp = fopen("users.txt", "r");
    char line[128], file_id[MAX_ID], file_pw[MAX_PW];

    if (!fp) return 0;

    while (fgets(line, sizeof(line), fp)) {
        sscanf(line, "%s %s", file_id, file_pw);
        if (strcmp(file_id, id) == 0 && strcmp(file_pw, pw) == 0) {
            fclose(fp);
            return 1;
        }
    }

    fclose(fp);
    return 0;
}

int is_id_taken(const char* id) {
    FILE* fp = fopen("users.txt", "r");
    char line[128], file_id[MAX_ID];

    if (!fp) return 0;

    while (fgets(line, sizeof(line), fp)) {
        sscanf(line, "%s", file_id);
        if (strcmp(file_id, id) == 0) {
            fclose(fp);
            return 1;
        }
    }

    fclose(fp);
    return 0;
}

void find_password(const char* id) {
    FILE* fp = fopen("users.txt", "r");
    char line[128], file_id[MAX_ID], file_pw[MAX_PW];

    if (!fp) {
        printf("파일 열기 실패\n");
        return;
    }

    while (fgets(line, sizeof(line), fp)) {
        sscanf(line, "%s %s", file_id, file_pw);
        if (strcmp(file_id, id) == 0) {
            printf("찾은 비밀번호: %s\n", file_pw);
            fclose(fp);
            return;
        }
    }

    printf("해당 아이디를 찾을 수 없습니다.\n");
    fclose(fp);
}

int login_screen() {
    while (_kbhit()) {
        _getch();
    }
    
    selected = 0;
    char id[MAX_ID], pw[MAX_PW], input[10], ch;
    const char* login[log] = {
        "로그인",
        "회원가입",
        "종료"
    };

    while (1) {
        while (_kbhit()) {
            _getch();
        }
        system("cls");
        while (1) {
            system("cls");
            printf("NEW NEWRROW\n");
            for (int i = 0; i < log; i++) {
                if (i == selected)
                    printf("> %s\n", login[i]);  // 선택된 항목에 > 표시
                else
                    printf("  %s\n", login[i]);
            }

            key = _getch();

            // 방향키 감지
            if (key == 0 || key == 224) {
                int arrow = _getch();
                switch (arrow) {
                case 72: // ↑
                    selected = (selected - 1 + log) % log;
                    break;
                case 80: // ↓
                    selected = (selected + 1) % log;
                    break;
                }
            }
            else if (key == 13) { // 엔터 키
                s = selected;
                break;
            }
        }
        switch (s) {
        case 0:
            printf("아이디: ");
            fgets(id, sizeof(id), stdin);
            id[strcspn(id, "\n")] = 0;
            printf("비밀번호: ");
            int i = 0;
            while (1) {
                
                ch = _getch();  // 콘솔에 문자 출력 없이 입력 받기

                if (ch == 13) {  // Enter 키
                    pw[i] = '\0';
                    printf("\n");
                    break;
                }
                else if (ch == 8) {  // 백스페이스 처리
                    if (i > 0) {
                        i--;
                        pw[i] = '\0';
                        printf("\b \b");  // 콘솔에서 * 지우기
                    }
                }
                else if (i < sizeof(pw) - 1) {
                    pw[i++] = ch;
                    printf("*");  // 화면에는 *로 표시
                }
            }

            if (verify_user(id, pw)) {
                strcpy(current_user, id);
                printf("로그인 성공! Enter...\n");
                fgets(input, sizeof(input), stdin);
                return 1;
            }
            else {
                printf("로그인 실패. 비밀번호를 찾으시겠습니까? (y/n): ");
                fgets(input, sizeof(input), stdin);
                if (input[0] == 'y' || input[0] == 'Y') {
                    find_password(id);
                }
                printf("Enter...");
                fgets(input, sizeof(input), stdin);
            } break;
        case 1:
            printf("새 아이디: ");
            fgets(id, sizeof(id), stdin);
            id[strcspn(id, "\n")] = 0;

            if (is_id_taken(id)) {
                printf("이미 존재하는 아이디입니다. Enter...\n");
                fgets(input, sizeof(input), stdin);
                continue;
            }

            printf("비밀번호: ");
            fgets(pw, sizeof(pw), stdin);

            FILE* fp = fopen("users.txt", "a");
            if (fp) {
                fprintf(fp, "%s %s\n", id, pw);
                fclose(fp);
                printf("회원가입 성공! Enter...\n");
            }
            else {
                printf("파일 쓰기 실패\n");
            }

            fgets(input, sizeof(input), stdin); break;
        case 2:
            end(); break;
        }
    }
    
}

void logout() {
    system("cls");
    printf("로그아웃 중 입니다.");
    Sleep(3500);
    system("cls");
    main();
}

void end() {
    system("cls");
    printf("종료 중 입니다.");
    Sleep(3500);
    system("cls");
    exit(0);

}